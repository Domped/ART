/**
 * SCENE FOR ART RENDERER
 * **********************
 * 
 * Scene configurable to show different effects that involve participating
 * media. The medium is contained in a Cornell Box like scene. In addition
 * to the standard ART options, several options are available to configure
 * the scene. All options given in <spiky_brackets> should be specified on
 * the command line as '-Dspiky_brackets'.
 * 
 * Options are:
 * ============
 *      Rendering options:
 *      ------------------
 *          - <SAMPLES=n>               Defines the number of samples to use
 *                                      for rendering (with n being the number)
 *          - <PATH_LENGTH=n>           Defines the maximum length for a path
 *
 *          - Path tracer mode:
 *              - <ALG_DS>              Direction sampling (default)
 *              - <ALG_LS>              Light sampling
 *              - <ALG_MIS>             Multiple importance sampling
 *
 *      Medium selection:
 *      -----------------
 *          - <HOMOGENEOUS>             Homogeneous medium
 *
 *          - <HETEROGENEOUS>           Heterogeneous volume:
 *              - <FLOATING_CUBE>       Uses a floating cube as heterogeneous
 *                                      medium
 *              - <HETERO_SCALE>        Set the scaling factor for the density
 *              - default uses a smoke volume from an example scene in Mitsuba
 *
 *          - <RAYLEIGH>                Uses an isotropic medium with Rayleigh
 *                                      phase function
 *
 *          - <EMPTY>                   No medium is used (useful as reference)
 *          - default is Homogeneous medium
 *
 *      Distance tracking mode: (used only for homogeneous medium)
 *      -----------------------
 *          - <DISTANCE_EXP>            Standard exponential tracking mode
 *          - <DISTANCE_MAX_EXP>        Take the maximum between the
 *                                      transmittance and the scattering
 *          - default is scattering aware mode
 *
 *      Scatering colour definition:
 *      ----------------------------
 *          - <USE_NON_FLUO>            Uses a non fluorescent volume
 *          - <REGULAR_SCATTERING>      Specifies the non fluorescent
 *                                      scattering part
 *
 *          - Fluorescent spectrum:
 *              - <FLUO_ABSORB>         Specifies the absorption peak in
 *                                      nanometers (default: 360)
 *              - <FLUO_ABSORB_SPREAD>  Specifies the absorption spread in
 *                                      nanometers (default: 40)
 *              - <FLUO_EMIT>           Specifies the reemission peak in
 *                                      nanometers (default: 560)
 *              - <FLUO_EMIT_SPREAD>    Specifies the reemission spread in
 *                                      nanometers (default: 50)
 *              - <FLUO_INTENSITY>      Specifies the intensity of the
 *                                      fluorescence over the main reflectance
 *
 *          - default is fluorescent spectrum
 *
 *      Absorption definition:
 *      ----------------------
 *          - <ABSORPTION>              Specify the grey absorption to use
 *                                      (default: 0)
 *
 *      Lighting configuration:
 *      -----------------------
 *          - Lighting configuration:
 *              - <USE_SHADE>           Small rear and front light are used
 *                                      separated with a shade
 *              - <LARGE_LIGHT>         The rear light is filling the ceiling,
 *                                      no front light is used
 *              - default:              Only middle sized rear light is used
 *              
 *          - Illuminant:
 *              - <MONO_450>            Sets a 450nm pure monochrome spectrum
 *                                      emission for the rear light
 *              - <MONO_550>            Sets a 550nm pure monochrome spectrum
 *                                      emission for the rear light
 *              - <LARGE_450>           Sets a 450nm dominant spectrum emission
 *                                      for the rear light
 *              - <LARGE_550>           Sets a 550nm dominant spectrum emission
 *                                      for the rear light
 *              - <SPECTRUM_D65>        Sets a D65 spectrum emission for the
 *                                      rear light
 *              - <VISIBLE_ONLY>        Sets a visible spectrum only emission
 *                                      for the rear light
 *              - <UV_ONLY>             Sets a uv spectrum only emission for
 *                                      the rear light
 *              - <FULL_ONLY>           Sets a full spectrum for the front light
 *              - default:              Full spectrum + UV for rear light and
 *                                      visible spectrum only for front light
 *
 *      Geometry configuration:
 *      -----------------------
 *          - Cornell box:
 *              - <PLAIN_BOX>           Use a classical Cornell box with solid
 *                                      colors on the walls
 *              - default:              Cornell box with grid on the walls
 *
 *          - Geometry:
 *              - <SPHERES>             Put two spheres inside the Cornell box
 *              - <SNAIL>               Put two spheres and a snail shell
 *                                      inside the box (the French option)
 *              - default:              No geometry is added to the Cornell box
 *              
 *     Material configuraiton:
 *     -----------------------
 *         - PLAIN_BRDF                 Discard fluorescent part for spheres
 *         - default                    Use the complete re-radiation matrix
 *
 * Dependencies:
 * =============
 * This scene relies on other files:
 *      - RadiosityBox.arm              Used to define the basic Cornell box
 *      - FluoSurface.arm               Used for the grooved sphere
 *      - SnailShell.arm                Used for the French snail geometry
 *      - smoke.vol                     Used for Heterogeneous medium when the
 *                                      floating cube isn't used
 */

#import "RadiosityBox.arm"
#import "SnailShell.arm"
#import "FluoSurface.arm"

#ifndef SAMPLES
    #define SAMPLES UNLIMITED
#endif

#ifndef PATH_LENGTH
    #define PATH_LENGTH 8
#endif

#if (defined FLOATING_CUBE || defined HETERO_SCALE)
    #define HETEROGENEOUS
#endif

/*
 * Select path tracer mode
 */
#if !(defined ALG_DS || defined ALG_LS || defined ALG_MIS)
    #define ALG_DS
#endif

#ifdef ALG_DS
    #define MODE arpathtracermode_direction_sampling
#elif defined ALG_LS
    #define MODE arpathtracermode_light_sampling
#else
    #define MODE arpathtracermode_mis
#endif

/*
 * Select medium importance sampling tracking mode
 */
#if !(defined DISTANCE_EXP || defined DISTANCE_MAX_EXP || defined DISTANCE_ASYM)
    #define DISTANCE_ASYM
#endif

#ifdef DISTANCE_EXP
    #define DISTANCE_MODE ardistancetrackingmode_exponential
#elif defined DISTANCE_MAX_EXP
    #define DISTANCE_MODE ardistancetrackingmode_maximal_exponential
#else
    #define DISTANCE_MODE ardistancetrackingmode_scattering_aware
#endif

/*
 * Colour specification
 */
#ifndef USE_NON_FLUO
    #ifndef REGULAR_SCATTERING
        #define REGULAR_SCATTERING 0
    #endif

    #ifndef FLUO_ABSORB
        #define FLUO_ABSORB 360
    #endif

    #ifndef FLUO_ABSORB_SPREAD
        #define FLUO_ABSORB_SPREAD 40
    #endif

    #ifndef FLUO_EMIT
        #define FLUO_EMIT 560
    #endif

    #ifndef FLUO_EMIT_SPREAD
        #define FLUO_EMIT_SPREAD 50
    #endif

    #ifndef FLUO_INTENSITY
        #define FLUO_INTENSITY 0.025
    #endif
#else
    #ifndef REGULAR_SCATTERING
        #define REGULAR_SCATTERING USE_NON_FLUO
    #endif
#endif

#ifndef HETERO_SCALE
    #define HETERO_SCALE 1.0
#endif

#ifndef ABSORPTION
    #define ABSORPTION 0
#endif

ArNode * createSpheres(ART_GV * art_gv)
{
    ArObj groovedSphere = createGroovedSphere( art_gv, 22 DEGREES, 0.1 );
    ArObj sphereFront = 
        [ groovedSphere apply
            :   ROT_Y(-35 DEGREES)
            :   ROT_X(23 DEGREES)
            :   USCALE( 0.4 )
            :   TRANSLATION( -0.5, 0.34, -0.6 )
            ];

    ArObj sphereBack = 
        [ groovedSphere apply
            :   USCALE( 0.6 )
            :   TRANSLATION( 0.3, -0.32, -0.4 )
            ];

#ifdef PLAIN_BRDF
	sphereFront = 
        [ sphereFront apply
            :   LAMBERT_REFLECTOR( PINK_POSTIT_PLAIN  )
            ];

    sphereBack = 
        [ sphereBack apply
            :   LAMBERT_REFLECTOR( GREEN_POSTIT_PLAIN )
            ];
#else
    sphereFront = 
        [ sphereFront apply
            :   LAMBERT_REFLECTOR( PINK_POSTIT_FLUORESCENT  )
            ];

    sphereBack = 
        [ sphereBack apply
            :   LAMBERT_REFLECTOR( GREEN_POSTIT_FLUORESCENT )
            ];
#endif
	
    return [ sphereFront or: sphereBack ];
}

ArNode * createSpheresFrenchSnail(ART_GV * art_gv)
{
    ArObj groovedSphere = createGroovedSphere( art_gv, 22 DEGREES, 0.1 );
    ArObj base_sphereA = 
        [ groovedSphere apply
            :   ROT_Y(-35 DEGREES)
            :   ROT_X(23 DEGREES)
            :   USCALE( 0.35 )
            :   TRANSLATION( -0.4, 0.6, -0.65 )
            ];

    ArObj base_sphereB = 
        [ groovedSphere apply
            :   USCALE( 0.5 )
            :   TRANSLATION( 0.4, 0.26, -0.5 )
            ];
	
#ifdef PLAIN_BRDF
	    base_sphereA = 
        [ base_sphereA apply
            :   LAMBERT_REFLECTOR( PINK_POSTIT_PLAIN )
            ];

    base_sphereB = 
        [ base_sphereB apply
            :   LAMBERT_REFLECTOR( GREEN_POSTIT_PLAIN )
            ];
#else
    base_sphereA = 
        [ base_sphereA apply
            :   LAMBERT_REFLECTOR( PINK_POSTIT_FLUORESCENT )
            ];

    base_sphereB = 
        [ base_sphereB apply
            :   LAMBERT_REFLECTOR( GREEN_POSTIT_FLUORESCENT )
            ];
#endif
	
    ArObj frenchSnail =
        [ create_Shell(art_gv) apply
            :   USCALE(0.55)
            :   ROT_Z(160 DEGREES)
            :   ROT_Y(12 DEGREES)
            :   ROT_X(-75 DEGREES)  
            :   TRANSLATION( -0.05, 0.3, 0.1 )
            :   SMOOTH_FRESNEL_SURFACE//TORRANCE_SPARROW_BLINN_SELENIUM( 0.35 )
            ];

    return [ [ base_sphereA or: base_sphereB ] or: frenchSnail ];
}

ArNode * createLighting(ART_GV * art_gv)
{
    // Spectrums
    ArObj spectrum450 =
        CONST_COLOUR_PSSPECTRUM(1.0,
                            PNT2D( 300.0 NANOMETER, 0.0 ),
                            PNT2D( 440.0 NANOMETER, 0.0 ),
                            PNT2D( 450.0 NANOMETER, 1.0 ),
                            PNT2D( 460.0 NANOMETER, 0.0 ),
                            PNT2D( 800.0 NANOMETER, 0.0 ),
                            PSS_END
                            );

    ArObj spectrum550 =
        CONST_COLOUR_PSSPECTRUM(1.0,
                            PNT2D( 300.0 NANOMETER, 0.0 ),
                            PNT2D( 540.0 NANOMETER, 0.0 ),
                            PNT2D( 550.0 NANOMETER, 1.0 ),
                            PNT2D( 560.0 NANOMETER, 0.0 ),
                            PNT2D( 800.0 NANOMETER, 0.0 ),
                            PSS_END
                            );
    ArObj spectrum450_l =
        CONST_COLOUR_PSSPECTRUM(1.0,
                            PNT2D( 300.0 NANOMETER, 0.0 ),
                            PNT2D( 400.0 NANOMETER, 1.0 ),
                            PNT2D( 470.0 NANOMETER, 1.0 ),
                            PNT2D( 500.0 NANOMETER, 0.0 ),
                            PNT2D( 800.0 NANOMETER, 0.0 ),
                            PSS_END
                            );

    ArObj spectrum550_l =
        CONST_COLOUR_PSSPECTRUM(1.0,
                            PNT2D( 300.0 NANOMETER, 0.0 ),
                            PNT2D( 500.0 NANOMETER, 0.0 ),
                            PNT2D( 520.0 NANOMETER, 1.0 ),
                            PNT2D( 570.0 NANOMETER, 1.0 ),
                            PNT2D( 580.0 NANOMETER, 0.0 ),
                            PNT2D( 800.0 NANOMETER, 0.0 ),
                            PSS_END
                            );

    ArObj daylight = CIE_ILLUMINANT_D65;

    ArObj fullSpectrum =
        CONST_COLOUR_PSSPECTRUM(1.0,
                            PNT2D( 300.0 NANOMETER, 1.0 ),
                            PNT2D( 700.0 NANOMETER, 1.0 ),
                            PSS_END
                            );

    ArObj visibleSpectrum =
        CONST_COLOUR_PSSPECTRUM(1.0,
            PNT2D( 300.0 NANOMETER, 0.0 ),
            PNT2D( 379.9 NANOMETER, 0.0 ),
            PNT2D( 380.0 NANOMETER, 1.0 ),
            PNT2D( 700.0 NANOMETER, 1.0 ),
            PSS_END
        );

    ArObj uvSpectrum =
        CONST_COLOUR_PSSPECTRUM(1.0,
            PNT2D( 300.0 NANOMETER, 1.0 ),
            PNT2D( 382.9 NANOMETER, 1.0 ),
            PNT2D( 383.0 NANOMETER, 0.0 ),
            PNT2D( 700.0 NANOMETER, 0.0 ),
            PSS_END
        );

    // Lighting
    ArObj backLight = 
    #if   defined MONO_450
        planarLamp(art_gv, spectrum450, 0.2, 1.0);
    #elif defined MONO_550
        planarLamp(art_gv, spectrum550, 0.2, 1.0);
    #elif defined LARGE_450
        planarLamp(art_gv, spectrum450_l, 0.2, 1.0);
    #elif defined LARGE_550
        planarLamp(art_gv, spectrum550_l, 0.2, 1.0);
    #elif defined SPECTRUM_D65
        planarLamp(art_gv, daylight, 0.2, 1.0);
    #elif defined VISIBLE_ONLY
        planarLamp(art_gv, visibleSpectrum, 0.2, 1.0);
	#elif defined UV_ONLY
	    planarLamp(art_gv, uvSpectrum, 0.2, 1.0);
    #else
        planarLamp(art_gv, fullSpectrum, 0.2, 1.0);
    #endif
    
    backLight =
    #if   defined LARGE_LIGHT
        [ backLight trafo: SCALE(1.0, 1.0, 0.2) : TRANSLATION(0.0,0.0,0.999)];
    #elif defined USE_SHADE
        [ backLight trafo: USCALE(0.2) : TRANSLATION(0.0,0.0,0.9)];
    #elif defined SMALL_LIGHT
        [ backLight trafo: USCALE(0.3) : TRANSLATION(0.0,0.0,0.999)];
    #else
        [ backLight trafo: USCALE(0.4) : TRANSLATION(0.0,0.0,0.99)];
    #endif

    ArObj frontLight = 
    #if   defined FULL_ONLY
        planarLamp(art_gv, fullSpectrum, 0.2, 1.0);
    #else
        planarLamp(art_gv, visibleSpectrum, 0.2, 1.0);
    #endif

    frontLight = [ frontLight trafo: USCALE(0.2) : TRANSLATION(0.0, 0.412, 0.9) ];

    ArObj shade = [ CUBE apply
            : SCALE(2.0, 0.01, 0.5)
            : TRANSLATION(-1.0, -0.005 + 0.206, 0.5)
            : LAMBERT_REFLECTOR(CONST_COLOUR_GREY(0.4))
    ];

    #ifdef USE_SHADE
    return [[ frontLight or: backLight ] or: shade ];
    #else
    return backLight;
    #endif
}

ARM_MAIN_FUNCTION(Volume)
{
    id scattering_colour = 
    #ifdef USE_NON_FLUO
        CONST_COLOUR_GREY(REGULAR_SCATTERING);
    #else
        CONST_FLUORESCENT_COLOUR(
            CONST_COLOUR_GREY(REGULAR_SCATTERING),
            (FLUO_INTENSITY),
            PNT2D((FLUO_ABSORB)        NM, (FLUO_EMIT)        NM),
            VEC2D((FLUO_ABSORB_SPREAD) NM, (FLUO_EMIT_SPREAD) NM)
        );
    #endif

#ifdef HETEROGENEOUS
    id heterogeneous_volume =
    #ifdef FLOATING_CUBE
        CONST_VOLUME_BOUNDED(
            1.0,
            PNT3D(-0.5, -0.5, -0.5),
            PNT3D( 0.5,  0.5,  0.5)
        );
    #else
        GRID_VOLUME("smoke.vol");    

	heterogeneous_volume =
            [ heterogeneous_volume apply
                : ROT_Z(-90 DEGREES)
                : ROT_X(90 DEGREES)
                : SCALE(2, 2, 2)
                ];
    #endif
#endif


    id scene_participating_medium =
    #ifdef HETEROGENEOUS
        HETEROGENEOUS_ISOTROPIC_MATERIAL_SCALE(
            CONST_COLOUR_GREY((ABSORPTION)),   // Absorption
            scattering_colour,                 // Scattering
            heterogeneous_volume,              // Volume
	    HETERO_SCALE                       // Density scaling
        );
	#elif RAYLEIGH
	RAYLEIGH_MATERIAL(CONST_COLOUR_GREY(1.0), CONST_COLOUR_GREY(1000 * 500 NM), 20, 0.5, 0.5);
    #else
        ISOTROPIC_MATERIAL(
            CONST_COLOUR_GREY(1.0),             // IOR
            CONST_COLOUR_GREY((ABSORPTION)),    // Absorption
            scattering_colour                   // Scattering
        );
    #endif

    id box = 
    #ifdef PLAIN_BOX
        radiosityBox_Plain(art_gv);
    #else
        radiosityBox_SimpleGrid(art_gv);
    #endif

    id scene_geometry = [ box or: createLighting(art_gv) ];

    scene_geometry = 
    #if   defined SNAIL
        [ scene_geometry or: createSpheresFrenchSnail(art_gv) ];
    #elif defined SPHERES
        [ scene_geometry or: createSpheres(art_gv) ];
    #else
        scene_geometry;
    #endif

    id camera =
        [ CAMERA
            imageSize : IVEC2D(256, 256)
                ray   : RAY3D(PNT3D(0.0, 5.0, 0.0), VEC3D(0.0, -1.0, 0.0) )
                zoom  : 1.42
        ];

    id actionsequence =
        ACTION_SEQUENCE(
            CREATE_STANDARD_RAYCASTING_ACCELERATION_STRUCTURE,

            [ LIGHTSOURCE_COLLECTOR
                sampler2D  : STANDARD_SAMPLER_2D
                resolution : 5
                type       : arlightsourcetype_area
            ],

            [ STOCHASTIC_PIXEL_SAMPLER
                sampleProvider:
                    [ SIMPLE_PATHTRACER
                        rayCaster        : STANDARD_RAYCASTER
                        maximalRecursion : PATH_LENGTH
                        mode             : MODE
                        distanceTracking : DISTANCE_MODE
                    ]
                sampleSplattingKernel : TENT_KERNEL
                samplesPerPixel       : SAMPLES
                randomValueGeneration : PSEUDORANDOM_SEQUENCE
            ],

            [ IMAGECONVERSION_RAW_TO_ARTCSP
                removeSource: NO
            ],

            STANDARD_GLOBAL_TONEMAPPING_OPERATOR,
            
            STANDARD_LUMINANCE_CLIPPING,

            [ IMAGECONVERSION_ARTCSP_TO_TIFF
                removeSource   : YES
                bitsPerChannel : 8
            ],

            ACTION_SEQUENCE_END
        );

    #ifdef EMPTY
    return
        [ SCENE
            sceneGeometry       : scene_geometry
            camera              : camera
            actionSequence      : actionsequence
        ];
    #else
    return
        [ SCENE
            sceneGeometry       : scene_geometry
            environmentMaterial : 0
            worldVolumeMaterial : scene_participating_medium
            camera              : camera
            actionSequence      : actionsequence
        ];
    #endif
}
