
#define HOMOGENEOUS_MATERIAL(_ior, _extinction)    ISOTROPIC_MATERIAL((_ior), (_extinction), CONST_COLOUR_GREY(0.0))

#undef CONST_COLOUR_RGB
#define CONST_COLOUR_RGB(_r, _g, _b) \
        CONST_COLOUR_PSSPECTRUM( 1.0, \
            PNT2D( 380.0 NANOMETER, (_b) ), \
            PNT2D( 460.0 NANOMETER, (_b) ), \
            PNT2D( 460.1 NANOMETER, (_g) ), \
            PNT2D( 580.0 NANOMETER, (_g) ), \
            PNT2D( 580.1 NANOMETER, (_r) ), \
            PNT2D( 700.0 NANOMETER, (_r) ), \
            PSS_END \
        )

#define CONST_ATTENUATION_GREY(_sigma_a) \
        CONST_COLOUR_PSSPECTRUM(1.0, \
            PNT2D( 380.0 NANOMETER, (_sigma_a) / (4 * MATH_PI) * 380.0 NANOMETER ), \
            PNT2D( 700.0 NANOMETER, (_sigma_a) / (4 * MATH_PI) * 700.0 NANOMETER ), \
            PSS_END \
        )

#define CONST_ATTENUATION_RGB(_r_sigma_a, _g_sigma_a, _b_sigma_a) \
        CONST_COLOUR_PSSPECTRUM( 1.0, \
            PNT2D( 380.0 NANOMETER, (_b_sigma_a) / (4 * MATH_PI) * 380.0 NANOMETER ), \
            PNT2D( 460.0 NANOMETER, (_b_sigma_a) / (4 * MATH_PI) * 460.0 NANOMETER ), \
            PNT2D( 460.1 NANOMETER, (_g_sigma_a) / (4 * MATH_PI) * 460.1 NANOMETER ), \
            PNT2D( 580.0 NANOMETER, (_g_sigma_a) / (4 * MATH_PI) * 580.0 NANOMETER ), \
            PNT2D( 580.1 NANOMETER, (_r_sigma_a) / (4 * MATH_PI) * 580.1 NANOMETER ), \
            PNT2D( 700.0 NANOMETER, (_r_sigma_a) / (4 * MATH_PI) * 700.0 NANOMETER ), \
            PSS_END \
        )

ArObj  radiosityBoxCamera(
        ART_GV  * art_gv
    )
{
    return
        [ CAMERA
            imageSize:    IVEC2D( 900, 900 )
            ray:        RAY3D( PNT3D(0.0,5.0,0.0),VEC3D(0.0,-1.0,0.0) )
            zoom:       1.42
            ];
}


ArObj  planarLamp(
        ART_GV  * art_gv,
    ArObj     emissionSpectrum,
    double    thickness,
    double    emissionIntensity
    )
{
    Pnt3D  * lampPoint = ALLOC_ARRAY( Pnt3D, 9 );

    ArObj  emitterMaterial = LAMBERT_EMITTER( emissionSpectrum, emissionIntensity );
    ArObj  whiteMaterial =   LAMBERT_MATERIAL( MACBETH_WHITE );

    ArObj  light =
        UNION(
            [ QUADRANGLE( 4, 6, 7, 5 ) apply: whiteMaterial ],
            [ QUADRANGLE( 1, 5, 7, 3 ) apply: whiteMaterial ],
            [ QUADRANGLE( 1, 5, 4, 0 ) apply: whiteMaterial ],
            [ QUADRANGLE( 2, 6, 4, 0 ) apply: whiteMaterial ],
            [ QUADRANGLE( 2, 6, 7, 3 ) apply: whiteMaterial ],
            [ QUADRANGLE( 0, 1, 3, 2 ) apply: emitterMaterial ],
            UNION_END
            );

    lampPoint[0] = PNT3D( 1.0, 1.0, 0.0);
    lampPoint[1] = PNT3D( 1.0,-1.0, 0.0);
    lampPoint[2] = PNT3D(-1.0, 1.0, 0.0);
    lampPoint[3] = PNT3D(-1.0,-1.0, 0.0);
    lampPoint[4] = PNT3D( 1.0, 1.0, thickness);
    lampPoint[5] = PNT3D( 1.0,-1.0, thickness);
    lampPoint[6] = PNT3D(-1.0, 1.0, thickness);
    lampPoint[7] = PNT3D(-1.0,-1.0, thickness);
    lampPoint[8] = PNT3D_HUGE;

    ArObj  vertices =
        arnvertexset(
            art_gv,
            lampPoint,
            NULL,
            NULL,
            NULL,
            NULL
            );

    return [ light apply: vertices ];
}

ArObj  radiosityBox(
        ART_GV  * art_gv,
        ArObj     rearSurface,
        ArObj     topSurface,
        ArObj     bottomSurface,
        ArObj     leftSurface,
        ArObj     rightSurface
    )
{
    double boxCorner = 1.0;

    Pnt3D  * boxPoint = ALLOC_ARRAY( Pnt3D, 9 );

    ArObj box =
        UNION(
            [ QUADRANGLE( 2, 6, 7, 3 ) apply: rearSurface ],
            [ QUADRANGLE( 0, 1, 3, 2 ) apply: leftSurface ],
            [ QUADRANGLE( 6, 7, 5, 4 ) apply: rightSurface ],
            [ QUADRANGLE( 0, 2, 6, 4 ) apply: topSurface ],
            [ QUADRANGLE( 1, 3, 7, 5 ) apply: bottomSurface ],
            UNION_END
            );

    boxPoint[0] = PNT3D( boxCorner, boxCorner, boxCorner);
    boxPoint[1] = PNT3D( boxCorner, boxCorner,-boxCorner);
    boxPoint[2] = PNT3D( boxCorner,-boxCorner, boxCorner);
    boxPoint[3] = PNT3D( boxCorner,-boxCorner,-boxCorner);
    boxPoint[4] = PNT3D(-boxCorner, boxCorner, boxCorner);
    boxPoint[5] = PNT3D(-boxCorner, boxCorner,-boxCorner);
    boxPoint[6] = PNT3D(-boxCorner,-boxCorner, boxCorner);
    boxPoint[7] = PNT3D(-boxCorner,-boxCorner,-boxCorner);
    boxPoint[8] = PNT3D_HUGE;

    ArObj  vertices =
        arnvertexset(
            art_gv,
            boxPoint,
            NULL,
            NULL,
            NULL,
            NULL
            );

    return [ box apply: vertices ];
}


/* ---------------------------------------------------------------------------
    'createSymetricLinesExpression'
--------------------------------------------------------------------------- */
id createSymetricLinesExpression(
        ART_GV  * art_gv,
        id        inputValue,
        double    frequency,
        double    thickness
        )
{
    // R -> [0, 1]
    id periodicExpr =
            DD_XMOD_D(
                    DD_MUL_D( inputValue, CONST_D( frequency ) ),
                    CONST_D( 1.0 )
                    );

    // lines
    id gridExpr =
        DD_SUB_D(
            CONST_D( 1.0 ),
            DDD_PULSE_D(
                CONST_D( thickness / 2.0 ),
                CONST_D( 1.0 - thickness / 2.0 ),
                periodicExpr
                )
            );

    return gridExpr;
}

/* ---------------------------------------------------------------------------
    'createXYGridSurface'
--------------------------------------------------------------------------- */
id createYZGridSurface(
        ART_GV  * art_gv,
        id        coordinates,
        id        mainSurface,
        id        gridSurface,
        double    thickness,        // portion of the periodic interval
        double    frequency
        )
{
    id xLinesExpr =
        createSymetricLinesExpression(
            art_gv,
            P3_Y( coordinates ),
            frequency,
            thickness
            );
    id yLinesExpr =
        createSymetricLinesExpression(
            art_gv,
            P3_Z( coordinates ),
            frequency,
            thickness
            );

    id xyGridExpr =
        DD_MAX_D(
            xLinesExpr,
            yLinesExpr
            );

    return
        MAPPED_SURFACE(
            xyGridExpr,
            SURFACE_MAP(
                0.0, mainSurface,
                1.0, gridSurface,
                MAP_END
                )
            );
}

id createXYGridSurface(
        ART_GV  * art_gv,
        id        coordinates,
        id        mainSurface,
        id        gridSurface,
        double    thickness,        // portion of the periodic interval
        double    frequency
        )
{
    id xLinesExpr =
        createSymetricLinesExpression(
            art_gv,
            P2_X( coordinates ),
            frequency,
            thickness
            );
    id yLinesExpr =
        createSymetricLinesExpression(
            art_gv,
            P2_Y( coordinates ),
            frequency,
            thickness
            );

    id xyGridExpr =
        DD_MAX_D(
            xLinesExpr,
            yLinesExpr
            );

    return
        MAPPED_SURFACE(
            xyGridExpr,
            SURFACE_MAP(
                0.0, mainSurface,
                1.0, gridSurface,
                MAP_END
                )
            );
}

ArObj radiosityBox_SimpleGrid(
        ART_GV  * art_gv
    )
{
#ifdef UV_COMPATIBLE_REFLECTANCES
    ArObj  red_uv  =
            CONST_COLOUR_RSSPECTRUM(
                320.0 NANOMETER, 10.0 NANOMETER, 1.0,
                0.005, 0.005, 0.005, 0.01, 0.01, 0.02, 0.0362, 0.0440, 0.0482,
                0.0480, 0.0464, 0.0454, 0.0448, 0.0440, 0.0423, 0.0396, 0.0363,
                0.0335, 0.0310, 0.0287, 0.0266, 0.0256, 0.0255, 0.0262, 0.0281,
                0.0334, 0.0556, 0.1224, 0.2425, 0.3969, 0.5471, 0.6536, 0.7123,
                0.7423, 0.7590, 0.7677, 0.7746, 0.7847, 0.7966, 0.8086, 0.8169,
                0.8262, RSS_END
                );

    ArObj  ltred_uv  =
            CONST_COLOUR_RSSPECTRUM(
                320.0 NANOMETER, 10.0 NANOMETER, 1.0,
                0.028, 0.03, 0.035, 0.04, 0.05, 0.06, 0.0786, 0.1260, 0.1799,
                0.2060, 0.2083, 0.2048, 0.2002, 0.1948, 0.1885, 0.1807, 0.1726,
                0.1645, 0.1564, 0.1505, 0.1483, 0.1468, 0.1471, 0.1605, 0.2092,
                0.3015, 0.4048, 0.4876, 0.5345, 0.5539, 0.5596, 0.5587, 0.5569,
                0.5542, 0.5517, 0.5472, 0.5424, 0.5387, 0.5347, 0.5311, 0.5269,
                0.5240, RSS_END
                );

    ArObj  blue_uv  =
            CONST_COLOUR_RSSPECTRUM(
                320.0 NANOMETER, 10.0 NANOMETER, 1.0,
                0.028, 0.03, 0.035, 0.04, 0.045, 0.05, 0.0674, 0.1254, 0.2195,
                0.3016, 0.3462, 0.3810, 0.4184, 0.4501, 0.4517, 0.4301, 0.3923,
                0.3452, 0.2997, 0.2551, 0.2015, 0.1556, 0.1236, 0.1010, 0.0786,
                0.0630, 0.0564, 0.0536, 0.0507, 0.0480, 0.0482, 0.0523, 0.0592,
                0.0666, 0.0719, 0.0717, 0.0652, 0.0585, 0.0556, 0.0570, 0.0618,
                0.0711, RSS_END
                );

    ArObj  ltblue_uv  =
            CONST_COLOUR_RSSPECTRUM(
                320.0 NANOMETER, 10.0 NANOMETER, 1.0,
                0.02, 0.025, 0.029, 0.032, 0.038, 0.05, 0.1119, 0.1967, 0.3515,
                0.4968, 0.5586, 0.5805, 0.5952, 0.6045, 0.6025, 0.5873, 0.5598,
                0.5190, 0.4732, 0.4296, 0.3841, 0.3472, 0.3177, 0.2897, 0.2574,
                0.2319, 0.2195, 0.2168, 0.2149, 0.2097, 0.2072, 0.2131, 0.2291,
                0.2499, 0.2669, 0.2707, 0.2606, 0.2485, 0.2446, 0.2498, 0.2589,
                0.2724, RSS_END
                );

    ArObj  yellow_uv  =
            CONST_COLOUR_RSSPECTRUM(
                320.0 NANOMETER, 10.0 NANOMETER, 1.0,
                0.015, 0.016, 0.017, 0.018, 0.019, 0.02, 0.0205, 0.0228, 0.0247,
                0.0251, 0.0250, 0.0251, 0.0259, 0.0269, 0.0282, 0.0294, 0.0312,
                0.0345, 0.0443, 0.0829, 0.1873, 0.3246, 0.4487, 0.5295, 0.5874,
                0.6366, 0.6521, 0.6281, 0.5762, 0.5191, 0.4773, 0.4509, 0.4334,
                0.4179, 0.4081, 0.4067, 0.4148, 0.4301, 0.4483, 0.4615, 0.4608,
                0.4559, RSS_END
                );

    ArObj  ltyellow_uv  =
            CONST_COLOUR_RSSPECTRUM(
                320.0 NANOMETER, 10.0 NANOMETER, 1.0,
                0.008, 0.008, 0.008, 0.01, 0.01, 0.02, 0.0560, 0.0817, 0.1071,
                0.1185, 0.1218, 0.1259, 0.1325, 0.1440, 0.1621, 0.1863, 0.2171,
                0.2527, 0.2959, 0.3688, 0.4843, 0.5721, 0.6201, 0.6466, 0.6713,
                0.7001, 0.7175, 0.7261, 0.7289, 0.7288, 0.7287, 0.7277, 0.7290,
                0.7303, 0.7313, 0.7299, 0.7280, 0.7282, 0.7291, 0.7302, 0.7300,
                0.7314, RSS_END
                );

    ArObj  grey_uv  =
            CONST_COLOUR_RSSPECTRUM(
                320.0 NANOMETER, 10.0 NANOMETER, 1.0,
                0.032, 0.035, 0.04, 0.045, 0.05, 0.06, 0.0851, 0.1553, 0.3171,
                0.4881, 0.5495, 0.5586, 0.5612, 0.5625, 0.5632, 0.5618, 0.5603,
                0.5594, 0.5579, 0.5567, 0.5561, 0.5539, 0.5536, 0.5537, 0.5533,
                0.5570, 0.5589, 0.5609, 0.5609, 0.5601, 0.5588, 0.5569, 0.5564,
                0.5562, 0.5568, 0.5547, 0.5532, 0.5518, 0.5511, 0.5506, 0.5485,
                0.5476, RSS_END
                );

    ArObj  white_uv  =
            CONST_COLOUR_RSSPECTRUM(
                320.0 NANOMETER, 10.0 NANOMETER, 1.0,
                0.032, 0.035, 0.04, 0.05, 0.06, 0.08, 0.1273, 0.2070, 0.3995,
                0.6672, 0.8467, 0.8982, 0.9082, 0.9126, 0.9163, 0.9171, 0.9171,
                0.9180, 0.9176, 0.9171, 0.9167, 0.9141, 0.9162, 0.9180, 0.9142,
                0.9140, 0.9106, 0.9094, 0.9068, 0.9046, 0.9038, 0.9029, 0.9044,
                0.9064, 0.9094, 0.9061, 0.9041, 0.9041, 0.9045, 0.9050, 0.9045,
                0.9075, RSS_END
                );

    ArObj red =        LAMBERT_MATERIAL( red_uv );
    ArObj ltred =      LAMBERT_MATERIAL( ltred_uv );
    ArObj blue =       LAMBERT_MATERIAL( blue_uv );
    ArObj ltblue =     LAMBERT_MATERIAL( ltblue_uv );
    ArObj yellow =     LAMBERT_MATERIAL( yellow_uv );
#else
    id clearCoating = STANDARD_MATERIAL(CONST_COLOUR_GREY(1.4), CONST_COLOUR_GREY(0.0));
    ArObj red = LAYERED_SURFACE(
TORRANCE_SPARROW_BLINN_SURFACE_CONST(
                    2 DEGREES
                ),
                //               SMOOTH_FRESNEL_SURFACE,
                clearCoating, CONST_DOUBLE(1.25),
                LAMBERT_REFLECTOR(MUNSELL_050R_04_14)
                );
//    ArObj red =        LAMBERT_MATERIAL( MUNSELL_050R_04_14 );
//    ArObj ltred =      LAMBERT_MATERIAL( MUNSELL_050R_06_08 );
    ArObj ltred = LAYERED_SURFACE(
TORRANCE_SPARROW_BLINN_SURFACE_CONST(
                    18 DEGREES
                ),
                //               SMOOTH_FRESNEL_SURFACE,
                clearCoating, CONST_DOUBLE(1.25),
                LAMBERT_REFLECTOR(MUNSELL_050R_06_08)
                );
//    ArObj blue =       LAMBERT_MATERIAL( MUNSELL_050PB_04_12 );
    ArObj blue = LAYERED_SURFACE(
TORRANCE_SPARROW_BLINN_SURFACE_CONST(
                    2 DEGREES
                ),
                //               SMOOTH_FRESNEL_SURFACE,
                clearCoating, CONST_DOUBLE(1.25),
                LAMBERT_REFLECTOR(MUNSELL_050PB_04_12)
                );
    ArObj ltblue = LAYERED_SURFACE(
TORRANCE_SPARROW_BLINN_SURFACE_CONST(
                    18 DEGREES
                ),
                //               SMOOTH_FRESNEL_SURFACE,
                clearCoating, CONST_DOUBLE(1.25),
                LAMBERT_REFLECTOR(MUNSELL_050PB_06_08)
                );
//    ArObj ltblue =     LAMBERT_MATERIAL( MUNSELL_050PB_06_08 );
    ArObj yellow =     LAMBERT_MATERIAL( MUNSELL_050Y_07_12 );
#endif
#ifdef METALLIC
    ArObj ltyellow =   TORRANCE_SPARROW_BLINN_SURFACE_WITH_MATERIAL_CONST(5 DEGREES, GOLD_MATERIAL);
#else
#ifdef UV_COMPATIBLE_REFLECTANCES
    ArObj ltyellow =   LAMBERT_MATERIAL( ltyellow_uv );
#else
    ArObj ltyellow =   LAMBERT_MATERIAL( MUNSELL_050Y_08_08 );
#endif
#endif
#ifdef UV_COMPATIBLE_REFLECTANCES
    ArObj grey =       LAMBERT_MATERIAL( grey_uv );
#else
    ArObj grey =       LAMBERT_MATERIAL( MACBETH_NEUTRAL8 );
    ArObj coatedgrey = LAYERED_SURFACE(
TORRANCE_SPARROW_BLINN_SURFACE_CONST(
                    10 DEGREES
                ),
                //               SMOOTH_FRESNEL_SURFACE,
                clearCoating, CONST_DOUBLE(1.25),
                LAMBERT_REFLECTOR(MACBETH_NEUTRAL8)
                );
#endif
#ifdef METALLIC
    ArObj white =      TORRANCE_SPARROW_BLINN_SURFACE_WITH_MATERIAL_CONST(5 DEGREES, SILVER_MATERIAL);
#else
#ifdef UV_COMPATIBLE_REFLECTANCES
    ArObj white =      LAMBERT_MATERIAL( white_uv );
#else
    ArObj white =      LAMBERT_MATERIAL( MACBETH_WHITE );
#endif
#endif

    ArObj metallicgrey = LAMBERT_MATERIAL( MACBETH_NEUTRAL8 );
    //TORRANCE_SPARROW_BLINN_SURFACE_WITH_MATERIAL_CONST(0.10,SILVER_MATERIAL);
    ArObj metallicwhite = TORRANCE_SPARROW_BLINN_SURFACE_WITH_MATERIAL_CONST(0.25,SILVER_MATERIAL);

    double  threshold = 0.075;

    ArObj bluegrid =
        createXYGridSurface(
            art_gv,
            TEXTURE_COORDS,
            blue,
            ltblue,
            threshold,
            4
            );

    ArObj redgrid =
        createXYGridSurface(
            art_gv,
            TEXTURE_COORDS,
            red,
            ltred,
            threshold,
            4
            );

    ArObj whitegrid =
        createXYGridSurface(
            art_gv,
            TEXTURE_COORDS,
            coatedgrey,
            white,
            threshold,
            4
            );

    ArObj metallicgrid =
        createXYGridSurface(
            art_gv,
            TEXTURE_COORDS,
            metallicgrey,
            metallicwhite,
            threshold,
            4
            );

    ArObj yellowgrid =
        createXYGridSurface(
            art_gv,
            TEXTURE_COORDS,
            yellow,
            ltyellow,
            threshold,
            4
            );

    ArObj  box =
        radiosityBox(
              art_gv,
              metallicgrid,
              yellowgrid,
              whitegrid,
              redgrid,
              bluegrid
            );

    return  box;
}

ArObj  illuminatedRadiosityBox_SimpleGrid(
        ART_GV  * art_gv,
    double    intensity
    )
{
    ArObj box   = radiosityBox_SimpleGrid( art_gv );
    ArObj light = planarLamp( art_gv, CIE_ILLUMINANT_D65, 0.2, intensity );

    light = [ light trafo: USCALE(0.2) : TRANSLATION(0.0,0.0,0.9) ];

    return [ box or: light ];
}

ArObj create_TransparentQuadrics(
        ART_GV  * art_gv
        )
{
    ArObj glassSurfaceMaterial =
        TORRANCE_SPARROW_BLINN_SURFACE_CONST( 0.1 DEGREES );
//        LAMBERT_MATERIAL( MACBETH_NEUTRAL8 );

    id glassRefraction  =
        CONST_COLOUR_RSSPECTRUM( 
            380.0 NANOMETER, 300.0 NANOMETER, 1.0,	
            1.6,  1.6,  1.6,
            RSS_END
            );

    ArObj greenGlassVolumeMaterial =
        STANDARD_MATERIAL(
            glassRefraction,
//            RAINBOW_GREEN
//            CONST_ATTENUATION_RGB(1000.0, 0.5, 1000.0)
//            CONST_ABSORBANCE_SPECTRUM( RAINBOW_GREEN, 0.01 )
//            CONST_REFLECTIVITY_SPECTRUM( ROSCOLUX_CHROMA_GREEN, 0.8 )
            CONST_REFLECTIVITY_SPECTRUM( RAINBOW_GREEN_0975, 1.4 )
            );


    ArObj pinkGlassVolumeMaterial =
        STANDARD_MATERIAL(
            glassRefraction,
//            RAINBOW_PINK
//            CONST_ATTENUATION_RGB(0.5, 1000.0, 0.5)
//            CONST_ABSORBANCE_SPECTRUM( RAINBOW_PINK, 100.0 )
//            CONST_REFLECTIVITY_SPECTRUM( ROSCOLUX_MEDIUM_PURPLE, 0.7 )
            CONST_REFLECTIVITY_SPECTRUM( RAINBOW_PINK_0975, 0.7 )
            );

    ArObj yellowGlassVolumeMaterial =
        STANDARD_MATERIAL(
            glassRefraction,
//            RAINBOW_YELLOW
//            CONST_ATTENUATION_RGB(0.5, 0.5, 1000.0)
//            CONST_ABSORBANCE_SPECTRUM( RAINBOW_YELLOW, 0.1 )
            CONST_REFLECTIVITY_SPECTRUM( ROSCOLUX_STRAW, 0.15 )
            );


    ArObj cyanGlassVolumeMaterial =
        STANDARD_MATERIAL(
            glassRefraction,
//            RAINBOW_CYAN
//            CONST_ATTENUATION_RGB(1000.0, 0.5, 0.5)
//            CONST_ABSORBANCE_SPECTRUM( RAINBOW_CYAN, 10.0 )
            CONST_REFLECTIVITY_SPECTRUM( ROSCOLUX_LIGHT_STEEL_BLUE, 0.25 )
            );

    ArObj cone =
        [ CONE apply
            :   glassSurfaceMaterial
            :   greenGlassVolumeMaterial
            ];
	
    ArObj cylinder =
        [ CYLINDER apply
            :   glassSurfaceMaterial
            :   pinkGlassVolumeMaterial
            ];

    ArObj sphere =
        [ SPHERE apply
            :   glassSurfaceMaterial
            :   yellowGlassVolumeMaterial
            ];
	
    ArObj torus =
        [ TORUS(0.3) apply
            :   glassSurfaceMaterial
            :   cyanGlassVolumeMaterial
            ];
    
    sphere =
        [ sphere apply
            :   USCALE(0.3)
            :   ROT_Y(65 DEGREES)
            :   ROT_Z(245 DEGREES)
            :   TRANSLATION(0.6,0.3,-0.6)
            ];

    cylinder =
        [ cylinder apply
            :   USCALE(0.3)
            :   ROT_Y(60 DEGREES)
            :   ROT_Z(15 DEGREES)
            :   TRANSLATION(-0.75,0.6,-0.6)
            ];

    torus =
        [ torus trafo
            :   USCALE(0.5)
            :   ROT_Y(65 DEGREES)
            :   ROT_Z(45 DEGREES)
            :   TRANSLATION(-0.25,-0.25,-0.2)
            ];
    
    cone =
        [ cone apply
            :   SCALE(0.3,0.3,-0.8)
            :   TRANSLATION(0.0,0.0,0.8)
            :   ROT_Y(65 DEGREES)
            :   ROT_Z(45 DEGREES)
            :   TRANSLATION(-0.25,-0.25,-0.2)
            ];

    return
        UNION(
            illuminatedRadiosityBox_SimpleGrid(art_gv,1.0),
            sphere,
            cone,
            cylinder,
            torus,
            UNION_END
            );
}

#ifndef SAMPLES
#define SAMPLES 32
#endif

ARM_MAIN_FUNCTION(TransparentQuadricsBox)
{
    id scene_geometry =
        create_TransparentQuadrics(art_gv);
    
    id camera =
        radiosityBoxCamera(art_gv);

    id actionsequence =
        ACTION_SEQUENCE(
            CREATE_STANDARD_RAYCASTING_ACCELERATION_STRUCTURE,

            [ LIGHTSOURCE_COLLECTOR
                sampler2D:   STANDARD_SAMPLER_2D
                resolution:  5
                type:        arlightsourcetype_area
            ],

            [ STOCHASTIC_PIXEL_SAMPLER
                sampleProvider:
                    [ PATHTRACER
                        rayCaster:        STANDARD_RAYCASTER
			maximalRecursion: 16
                    ]
                sampleSplattingKernel: TENT_KERNEL
                samplesPerPixel:       SAMPLES
                randomValueGeneration: PSEUDORANDOM_SEQUENCE
            ],

            [ IMAGECONVERSION_RAW_TO_ARTCSP
                removeSource: NO
            ],

            STANDARD_GLOBAL_TONEMAPPING_OPERATOR,
                        
            STANDARD_LUMINANCE_CLIPPING,

            [ IMAGECONVERSION_ARTCSP_TO_TIFF
                removeSource:    YES
                bitsPerChannel:  8
                ],
            
            ACTION_SEQUENCE_END 
            );

    return
        [ SCENE
            sceneGeometry      : scene_geometry
            camera             : camera
            actionSequence     : actionsequence
            ];
}
