#define HOMOGENEOUS_MATERIAL(_ior, _extinction)    ISOTROPIC_MATERIAL((_ior), (_extinction), CONST_COLOUR_GREY(0.0))

#define CONST_ATTENUATION_GREY(_sigma_a) \
        CONST_COLOUR_PSSPECTRUM(1.0, \
            PNT2D( 380.0 NANOMETER, (_sigma_a) / (4 * MATH_PI) * 380.0 NANOMETER ), \
            PNT2D( 700.0 NANOMETER, (_sigma_a) / (4 * MATH_PI) * 700.0 NANOMETER ), \
            PSS_END \
        )

// define this to get an all diffuse background: no Fresnel rhomb
// activity in that case, of course

//#define DIFFUSE_DARK_SQUARES

#define DIFFUSE_ILLUMINATION

#define GLASS_IOR   1.52

#ifndef SAMPLES
#define SAMPLES 32
#endif


ArObj create_RhombsOverCheckerboard(
        ART_GV  * art_gv
        )
{
    id smoothSurface = SMOOTH_FRESNEL_SURFACE;

    //   First part: the checkerboard background
    
    ArObj  square =
        [ CUBE apply
            :   SCALE(2.0,2.0,0.2)
            :   TRANSLATION(-1,-1, 0)
            ];

#ifdef DIFFUSE_DARK_SQUARES
    ArObj darkSquareSurface = LAMBERT_REFLECTOR( MACBETH_NEUTRAL35 );
    ArObj darkSquare = [ square apply: darkSquareSurface ];
#else
    id ior_dielectric  =
        CONST_COLOUR_RSSPECTRUM(
            380.0 NANOMETER, 300.0 NANOMETER, 1.0,
            2.1,  2.1,  2.1,
            RSS_END
            );

    ArObj dielectric =
            STANDARD_MATERIAL( ior_dielectric,
                CONST_ABSORBANCE_SPECTRUM( CONST_COLOUR_GREY(1.0), 1.0 ) );

    ArObj dark_glass_material =
        HOMOGENEOUS_MATERIAL( ior_dielectric, CONST_ATTENUATION_GREY( 1000.0 ) );

    ArObj darkSquare =
        [ square apply
            :   dielectric
            :   smoothSurface
            ];
#endif

    ArObj  lightSquareSurface   = LAMBERT_REFLECTOR( MACBETH_NEUTRAL8 );

    ArObj  lightSquare = [ square apply: lightSquareSurface ];

    ArObj  eighth =
        UNION(
            [ lightSquare trafo: TRANSLATION(-1,-1,0) ],
            [ darkSquare  trafo: TRANSLATION(-1, 1,0) ],
            [ darkSquare  trafo: TRANSLATION( 1,-1,0) ],
            [ lightSquare trafo: TRANSLATION( 1, 1,0) ],
            UNION_END
            );

    ArObj  quarter =
        UNION(
            [ eighth trafo: TRANSLATION(-2,-2,0) ],
            [ eighth trafo: TRANSLATION(-2, 2,0) ],
            [ eighth trafo: TRANSLATION( 2,-2,0) ],
            [ eighth trafo: TRANSLATION( 2, 2,0) ],
            UNION_END
            );

    ArObj  half =
        UNION(
            [ quarter trafo: TRANSLATION(-4,-4,0) ],
            [ quarter trafo: TRANSLATION(-4, 4,0) ],
            [ quarter trafo: TRANSLATION( 4,-4,0) ],
            [ quarter trafo: TRANSLATION( 4, 4,0) ],
            UNION_END
            );

    ArObj  board =
        UNION(
            [ half trafo: TRANSLATION(-8,-8,0) ],
            [ half trafo: TRANSLATION(-8, 8,0) ],
            [ half trafo: TRANSLATION( 8,-8,0) ],
            [ half trafo: TRANSLATION( 8, 8,0) ],
            UNION_END
            );

    board =
        [ board apply
            :   USCALE(1.5)
            :   TRANSLATION( 1.6, 0.9, 0.25)
            ];

    ArObj  baseSurface = LAMBERT_REFLECTOR( MACBETH_NEUTRAL65 );

    ArObj  base =
        [ CUBE apply
            :   SCALE(90,90,0.5)
            :   TRANSLATION(-45,-45, -1.0)
            :   baseSurface
            ];

    ArObj  background = UNION( base, board, UNION_END );

    //   The background is tilted away from the viewer, to cause
    //   reflective polarisation off the specular tiles
    
    background =
        [ background apply
            :   ROT_Y( 55 DEGREES )
            :   TRANSLATION(0,0,-7)
            ];

    //   The glass core of the Fresnel rhomb
    
    id ior_glass  =
        CONST_COLOUR_RSSPECTRUM(
            380.0 NANOMETER, 100.0 NANOMETER, 1.0,
            GLASS_IOR,  GLASS_IOR,  GLASS_IOR, GLASS_IOR, GLASS_IOR,
            RSS_END
            );

    id extinction_glass  =
        CONST_COLOUR_RSSPECTRUM(
            380.0 NANOMETER, 100.0 NANOMETER, 1.0,
            0,  0,  0,  0,  0,
            RSS_END
            );

    id material_glass = STANDARD_MATERIAL( ior_glass, extinction_glass );

    ArObj rhombCore =
        [ CUBE apply
            :   material_glass
            :   smoothSurface
            ];

    //   The rhomb is covered by thin cubes around its sides
    //   to prevent distracting reflections
    
    ArObj rhombCoverSurface = LAMBERT_REFLECTOR( MACBETH_NEUTRAL65 );

    double  coverThickness = 0.05;
    double  coverDistance  = 0.001;
    
    double  coverShift = coverThickness+coverDistance;
    
    ArObj rhombCoverA =
        [ CUBE apply
            :   SCALE(coverThickness,1.0+2*(coverShift),1.0)
            :   TRANSLATION(-coverShift,-coverShift,0)
            :   rhombCoverSurface
            ];

    ArObj rhombCoverB =
        [ CUBE apply
            :   SCALE(coverThickness,1.0+2*(coverShift),1.0)
            :   TRANSLATION(1.0+coverDistance,-coverShift,0)
            :   rhombCoverSurface
            ];

    ArObj rhombCoverC =
        [ CUBE apply
            :   SCALE(1.0,coverThickness,1.0)
            :   TRANSLATION(0,-(coverThickness+coverDistance),0)
            :   rhombCoverSurface
            ];

    ArObj rhombCoverD =
        [ CUBE apply
            :   SCALE(1.0,coverThickness,1.0)
            :   TRANSLATION(0,1.0+coverDistance,0)
            :   rhombCoverSurface
            ];
    
    //   Glass core plus cover
    
    ArObj rhomb =
        UNION(
            rhombCore,
            rhombCoverA,
            rhombCoverB,
            rhombCoverC,
            rhombCoverD,
            UNION_END
            );

    //   Only now does it actually become a Fresnel rhomb, by
    //   being sheared
    
    rhomb =
        [ rhomb apply
            :   SCALE(1.4,4.0,1.8)
            :   SHEAR_XY(-0.8,0.0)
            :   SCALE(1.2,1.0,1.0)
            ];

    //   Four copies, rotated in 45 degree increments
    
    ArObj  rhombA =
        [ rhomb apply
            :   ROT_Z( 45 DEGREES )
            :   TRANSLATION(-1.4,1.8,1)
            ];

    ArObj  rhombB =
        [ rhomb apply
            :   ROT_Z( -45 DEGREES )
            :   TRANSLATION(-4.2,-4.5,1)
            ];

    ArObj  rhombC =
        [ rhomb apply
            :   ROT_Z( 0 DEGREES )
            :   TRANSLATION(2.8,1.1,1)
            ];

    ArObj  rhombD =
        [ rhomb apply
            :   ROT_Z( 90 DEGREES )
            :   TRANSLATION(4.8,-3,1)
            ];

    return UNION( rhombA, rhombB, rhombC, rhombD, background, UNION_END );
}


ArNode <ArpCamera> * create_RhombCamera(
        ART_GV  * art_gv
        )
{
    return
    [ CAMERA
	imageSize: IVEC2D( 1024, 1024 )
	ray:       RAY3D(PNT3D(0,0,50),VEC3D(0,0,-1))
	zoom:      2.8
    ];
}

ArNode <ArpActionSequence> *  create_RhombActionSequence(
        ART_GV  * art_gv
        )
{
    id actionsequence =
        ACTION_SEQUENCE(
            CREATE_STANDARD_RAYCASTING_ACCELERATION_STRUCTURE,

            [ LIGHTSOURCE_COLLECTOR
                sampler2D:   STANDARD_SAMPLER_2D
                resolution:  5
                type:        arlightsourcetype_area
            ],

            [ STOCHASTIC_PIXEL_SAMPLER
                sampleProvider:
                    [ PATHTRACER
                        rayCaster:        STANDARD_RAYCASTER
			maximalRecursion: 20
                    ]
                sampleSplattingKernel: TENT_KERNEL
                samplesPerPixel:       SAMPLES
                randomValueGeneration: PSEUDORANDOM_SEQUENCE
            ],

            [ IMAGECONVERSION_RAW_TO_ARTCSP
                removeSource: NO
            ],

            STANDARD_GLOBAL_TONEMAPPING_OPERATOR,
                        
            STANDARD_LUMINANCE_CLIPPING,

            [ IMAGECONVERSION_ARTCSP_TO_TIFF
                removeSource:    YES
                bitsPerChannel:  8
                ],
            
            ACTION_SEQUENCE_END 
            );

    return actionsequence;
}

ARM_MAIN_FUNCTION(Rhomb)
{
#ifdef DIFFUSE_ILLUMINATION
    id environmentMaterial = UNIFORM_ENVIRONMENT_MATERIAL( CIE_ILLUMINANT_D65, 1.0 );
#endif

    id result =
    [ SCENE
    	sceneGeometry: create_RhombsOverCheckerboard(art_gv)
#ifdef DIFFUSE_ILLUMINATION
        environmentMaterial   : environmentMaterial
#else
	skyModel:  [ HOSEK_SKYLIGHT
            elevation   : 25 DEGREES
            azimuth     : 220.0 DEGREES
            turbidity   : 4.0
            groundAlbedo: CONST_COLOUR_GREY(0.5)
            ]
#endif
	camera:		create_RhombCamera(art_gv)
        actionSequence: create_RhombActionSequence(art_gv)
    ];

    return result;
}
