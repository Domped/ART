#ifndef SAMPLES
    #define SAMPLES 8
#endif

#ifdef ALG_LS
    #define MODE arpathtracermode_light_sampling
#elif defined ALG_DS
    #define MODE arpathtracermode_direction_sampling
#else
    #define MODE arpathtracermode_mis
#endif

ArObj whiteReflectance(ART_GV * art_gv) {
    return
        CONST_COLOUR_RSSPECTRUM(400 NANOMETER, 4 NANOMETER, 1.0,
            0.343, 0.445, 0.551, 0.624, 0.665, 0.687, 0.708, 0.723, 0.715,
            0.710, 0.745, 0.758, 0.739, 0.767, 0.777, 0.765, 0.751, 0.745,
            0.748, 0.729, 0.745, 0.757, 0.753, 0.750, 0.746, 0.747, 0.735,
            0.732, 0.739, 0.734, 0.725, 0.721, 0.733, 0.725, 0.732, 0.743,
            0.744, 0.748, 0.728, 0.716, 0.733, 0.726, 0.713, 0.740, 0.754,
            0.764, 0.752, 0.736, 0.734, 0.741, 0.740, 0.732, 0.745, 0.755,
            0.751, 0.744, 0.731, 0.733, 0.744, 0.731, 0.712, 0.708, 0.729,
            0.730, 0.727, 0.707, 0.703, 0.729, 0.750, 0.760, 0.751, 0.739,
            0.724, 0.730, 0.740, 0.737, RSS_END
            );
}

ArObj greenReflectance(ART_GV * art_gv) {
    return
        CONST_COLOUR_RSSPECTRUM(400 NANOMETER, 4 NANOMETER, 1.0,
            0.092, 0.096, 0.098, 0.097, 0.098, 0.095, 0.095, 0.097, 0.095,
            0.094, 0.097, 0.098, 0.096, 0.101, 0.103, 0.104, 0.107, 0.109,
            0.112, 0.115, 0.125, 0.140, 0.160, 0.187, 0.229, 0.285, 0.343,
            0.390, 0.435, 0.464, 0.472, 0.476, 0.481, 0.462, 0.447, 0.441,
            0.426, 0.406, 0.373, 0.347, 0.337, 0.314, 0.285, 0.277, 0.266,
            0.250, 0.230, 0.207, 0.186, 0.171, 0.160, 0.148, 0.141, 0.136,
            0.130, 0.126, 0.123, 0.121, 0.122, 0.119, 0.114, 0.115, 0.117,
            0.117, 0.118, 0.120, 0.122, 0.128, 0.132, 0.139, 0.144, 0.146,
            0.150, 0.152, 0.157, 0.159, RSS_END
            );
}

ArObj redReflectance(ART_GV * art_gv) {
    return
        CONST_COLOUR_RSSPECTRUM(400 NANOMETER, 4 NANOMETER, 1.0,
            0.040, 0.046, 0.048, 0.053, 0.049, 0.050, 0.053, 0.055, 0.057,
            0.056, 0.059, 0.057, 0.061, 0.061, 0.060, 0.062, 0.062, 0.062,
            0.061, 0.062, 0.060, 0.059, 0.057, 0.058, 0.058, 0.058, 0.056,
            0.055, 0.056, 0.059, 0.057, 0.055, 0.059, 0.059, 0.058, 0.059,
            0.061, 0.061, 0.063, 0.063, 0.067, 0.068, 0.072, 0.080, 0.090,
            0.099, 0.124, 0.154, 0.192, 0.255, 0.287, 0.349, 0.402, 0.443,
            0.487, 0.513, 0.558, 0.584, 0.620, 0.606, 0.609, 0.651, 0.612,
            0.610, 0.650, 0.638, 0.627, 0.620, 0.630, 0.628, 0.642, 0.639,
            0.657, 0.639, 0.635, 0.64, RSS_END
            );
}


ArObj lightSpectrum(ART_GV * art_gv)
{
    return
#ifdef FL11
        CIE_ILLUMINANT_FL11;
#endif

//   The image map version of the scene defaults to D65, with the original
//   cornell box luminaire as option.

#ifdef ORIGINAL_LIGHT
        CONST_COLOUR_RSSPECTRUM(400 NANOMETER, 100 NANOMETER, 1.0,
            0.0, 8.0, 15.6, 18.4,
            RSS_END
            );
#else
        CIE_ILLUMINANT_D65;
#endif
}


ArObj createShortBlock(ART_GV * art_gv) {
    Pnt3D * blockPoints = ALLOC_ARRAY( Pnt3D, 9);
    
    blockPoints[0] = PNT3D(130.0, 165.0,  65.0); // top    right front
    blockPoints[1] = PNT3D( 82.0, 165.0, 225.0); // top    right rear
    blockPoints[2] = PNT3D(290.0, 165.0, 114.0); // top    left  front
    blockPoints[3] = PNT3D(240.0, 165.0, 272.0); // top    left  rear
    blockPoints[4] = PNT3D(130.0,   0.0,  65.0); // bottom right front
    blockPoints[5] = PNT3D( 82.0,   0.0, 225.0); // bottom right rear
    blockPoints[6] = PNT3D(290.0,   0.0, 114.0); // bottom left  front
    blockPoints[7] = PNT3D(240.0,   0.0, 272.0); // bottom left  rear


    blockPoints[8] = PNT3D_HUGE;

    ArObj vertices =
        arnvertexset(
            art_gv,
            blockPoints,
            NULL,
            NULL,
            NULL,
            NULL
            );

    ArObj block =
        UNION(
            QUADRANGLE( 0, 1, 3, 2 ),
            QUADRANGLE( 2, 3, 7, 6 ),
            QUADRANGLE( 6, 4, 5, 7 ),
            QUADRANGLE( 7, 3, 1, 5 ),
            QUADRANGLE( 5, 1, 0, 4 ),
            QUADRANGLE( 4, 0, 2, 6 ),
            UNION_END
            );

    ArObj blockMaterial = LAMBERT_REFLECTOR(whiteReflectance(art_gv));

    return
        [ block apply
            : vertices
            : blockMaterial
            ];
}


ArObj createTallBlock(ART_GV * art_gv) {
    Pnt3D * blockPoints = ALLOC_ARRAY( Pnt3D, 9);

//  Compared to the original Cornell box, the tall block has been
//  shortened a bit, so that one can see the face of Gandalf.

    blockPoints[0] = PNT3D(265.0, 230.0, 296.0); // top    right front
    blockPoints[1] = PNT3D(314.0, 230.0, 456.0); // top    right rear
    blockPoints[2] = PNT3D(423.0, 230.0, 247.0); // top    left  front
    blockPoints[3] = PNT3D(472.0, 230.0, 406.0); // top    left  rear
    blockPoints[4] = PNT3D(265.0,   0.0, 296.0); // bottom right front
    blockPoints[5] = PNT3D(314.0,   0.0, 456.0); // bottom right rear
    blockPoints[6] = PNT3D(423.0,   0.0, 247.0); // bottom left  front
    blockPoints[7] = PNT3D(472.0,   0.0, 406.0); // bottom left  rear


    blockPoints[8] = PNT3D_HUGE;

    ArObj vertices =
        arnvertexset(
            art_gv,
            blockPoints,
            NULL,
            NULL,
            NULL,
            NULL
            );
    
    ArObj block =
        UNION(
            QUADRANGLE( 0, 1, 3, 2 ),
            QUADRANGLE( 2, 3, 7, 6 ),
            QUADRANGLE( 6, 4, 5, 7 ),
            QUADRANGLE( 7, 3, 1, 5 ),
            QUADRANGLE( 5, 1, 0, 4 ),
            QUADRANGLE( 4, 6, 2, 0 ),
            QUADRANGLE( 4, 6, 2, 0 ),
            UNION_END
            );

    ArObj blockMaterial = LAMBERT_REFLECTOR(whiteReflectance(art_gv));

    return
        [ block apply
            : vertices
            : blockMaterial
            ];
}


ArObj createPictureOnWall(ART_GV * art_gv) {
    Pnt3D * picturePoints = ALLOC_ARRAY( Pnt3D, 5);
    
    double  wallsize_y = 548.8;
    double  wallsize_z = 559.2;
    
    double  wallcenter_y = wallsize_y / 2.0;
    double  wallcenter_z = wallsize_z / 2.0;
    
    double  picturesize_ratio = 0.42;  // in terms of y wall size
    
    double  picturesize_div_2 = ( wallsize_y * picturesize_ratio ) / 2.0;
    
    double  y_offset = 0.1; // this moves the picture upwards on the right wall
    
    double  p_y_l = wallcenter_y - picturesize_div_2 + y_offset * wallsize_y;
    double  p_y_h = wallcenter_y + picturesize_div_2 + y_offset * wallsize_y;
    double  p_z_l = wallcenter_z - picturesize_div_2;
    double  p_z_h = wallcenter_z + picturesize_div_2;

    picturePoints[0] = PNT3D(   5.0, p_y_l, p_z_l ); // right  top    rear
    picturePoints[1] = PNT3D(   5.0, p_y_h, p_z_l ); // right  top    front
    picturePoints[2] = PNT3D(   5.0, p_y_h, p_z_h ); // right  bottom rear
    picturePoints[3] = PNT3D(   5.0, p_y_l, p_z_h ); // right  bottom front

    picturePoints[4] = PNT3D_HUGE;

    ArObj vertices =
        arnvertexset(
            art_gv,
            picturePoints,
            NULL,
            NULL,
            NULL,
            NULL
            );

    ArObj textureLambert = LAMBERT_REFLECTOR( IMAGE_MAP("MountCook.exr") );

    ArObj pictureGeometry =
        [ QUADRANGLE(2, 3, 0, 1) apply
            : textureLambert
            ];

    return
        [ pictureGeometry apply : vertices ];
}


ArObj createBox(ART_GV * art_gv) {
    Pnt3D * boxPoints = ALLOC_ARRAY( Pnt3D, 13 );

    boxPoints[0] = PNT3D( 553.0, 548.8, 559.2 ); // left   top    rear
    boxPoints[1] = PNT3D( 553.0, 548.8,   0.0 ); // left   top    front
    boxPoints[2] = PNT3D( 553.0,   0.0, 559.2 ); // left   bottom rear
    boxPoints[3] = PNT3D( 553.0,   0.0,   0.0 ); // left   bottom front
    boxPoints[4] = PNT3D(   0.0, 548.8, 559.2 ); // right  top    rear
    boxPoints[5] = PNT3D(   0.0, 548.8,   0.0 ); // right  top    front
    boxPoints[6] = PNT3D(   0.0,   0.0, 559.2 ); // right  bottom rear
    boxPoints[7] = PNT3D(   0.0,   0.0,   0.0 ); // right  bottom front

    // Hole in the ceiling
    boxPoints[8]  = PNT3D( 343.0, 548.8 , 227.0);
    boxPoints[9]  = PNT3D( 343.0, 548.8 , 332.0);
    boxPoints[10] = PNT3D( 213.0, 548.8 , 332.0);
    boxPoints[11] = PNT3D( 213.0, 548.8 , 227.0);
    
    boxPoints[12] = PNT3D_HUGE;
    
    ArObj vertices = 
        arnvertexset(
            art_gv,
            boxPoints,
            NULL,
            NULL,
            NULL,
            NULL
            );

    ArObj whiteLambert    = LAMBERT_REFLECTOR(whiteReflectance(art_gv));
    ArObj redLambert      = LAMBERT_REFLECTOR(redReflectance(art_gv));
    ArObj greenLambert    = LAMBERT_REFLECTOR(greenReflectance(art_gv));
    ArObj textureLambert  = LAMBERT_REFLECTOR(IMAGE_MAP("Gandalf.tiff"));
    ArObj emitterMaterial = LAMBERT_EMITTER  (lightSpectrum(art_gv), 1.0 );
    
    ArObj floorGeometry = 
        [ QUADRANGLE(2, 3, 7, 6) apply
            : whiteLambert
            ];

    ArObj ceilingGeometry =
      [ UNION(
	      QUADRANGLE(0, 9, 8, 1),
	      QUADRANGLE(1, 8, 11, 5),
	      QUADRANGLE(5, 11, 10, 4),
	      QUADRANGLE(4, 10, 9, 0),
	      UNION_END
	      ) apply
            : whiteLambert
            ];

    ArObj rightWallGeometry =
        [ QUADRANGLE(6, 7, 5, 4) apply
            : greenLambert
            ];

    ArObj leftWallGeometry = 
        [ QUADRANGLE(0, 1, 3, 2) apply
            : redLambert
            ];

    ArObj backWallGeometry =
      [ QUADRANGLE(4, 6, 2, 0) apply
            : textureLambert
            ];

    ArObj lightGeometry =
        [ QUADRANGLE( 8, 9, 10, 11) apply
	    : emitterMaterial
	    ];

    ArObj box =
        UNION(
            floorGeometry,
            rightWallGeometry,
            ceilingGeometry,
            leftWallGeometry,
            backWallGeometry,
	    lightGeometry,
            UNION_END
            );

    return [ box apply: vertices ];
}


ARM_MAIN_FUNCTION(CornellBoxImageMap)
{
    ArObj scene_geometry =
        UNION(
            createBox(art_gv),
            createShortBlock(art_gv),
            createTallBlock(art_gv),
            createPictureOnWall(art_gv),
            UNION_END
            );

    id camera =
        [ CAMERA
            imageSize: IVEC2D(250, 250)
            ray:       RAY3D(PNT3D(278, 273, -800), VEC3D(0.0, 0.0, 1.0))
            zoom:      1
            ];

    [ camera withTwist: -90 DEGREES ];

    ArObj actionsquence =
        ACTION_SEQUENCE(
            CREATE_STANDARD_RAYCASTING_ACCELERATION_STRUCTURE,
            
            [ LIGHTSOURCE_COLLECTOR
                sampler2D:   STANDARD_SAMPLER_2D
                resolution:  5
                type:        arlightsourcetype_area
            ],

            [ STOCHASTIC_PIXEL_SAMPLER
                sampleProvider:
                    [ PATHTRACER
                        rayCaster:        STANDARD_RAYCASTER
                        maximalRecursion: 32
                        mode:             MODE
                        ]
                sampleSplattingKernel: TENT_KERNEL
                samplesPerPixel:       SAMPLES
                randomValueGeneration: RANDOM_SEQUENCE
                ],

            [ IMAGECONVERSION_RAW_TO_ARTCSP
                removeSource: NO
                ],

            STANDARD_GLOBAL_TONEMAPPING_OPERATOR,
                        
            STANDARD_LUMINANCE_CLIPPING,
            
            [ IMAGECONVERSION_ARTCSP_TO_TIFF
                removeSource:   YES
                bitsPerChannel: 8
                ],
            
            ACTION_SEQUENCE_END
            );
  
    return
        [ SCENE
            sceneGeometry:  scene_geometry
            camera:         camera
            actionSequence: actionsquence
            ];
}
