/**
 * SCENE FOR ART RENDERER
 * **********************
 * 
 * Scene configurable to show different effects using participating medium
 * The medium is contained in a Cornell Box like scene.
 * In addition to the standard ART options, several options are available to
 * configure the scene
 * 
 * Options are:
 * ============
 *      Rendering options:
 *      ------------------
 *          - <SAMPLES>                 Defines the number of samples to use for rendering
 *          - <PATH_LENGTH>             Defines the maximum length for a path
 *
 *          - Path tracer mode:
 *              - <ALG_DS>              Direction sampling (default)
 *              - <ALG_LS>              Light sampling
 *              - <ALG_MIS>             Multiple importance sampling
 *
 *
 * Dependencies:
 * =============
 * This scene relies on other files:
 *      - include/RadiosityBox.arm      Used to define the basic Cornell box
 */

#import "include/RadiosityBox.arm"

#ifndef SAMPLES
    #define SAMPLES UNLIMITED
#endif

#ifndef PATH_LENGTH
    #define PATH_LENGTH 8
#endif

/*
 * Select path tracer mode
 */
#if !(defined ALG_DS || defined ALG_LS || defined ALG_MIS)
    #define ALG_DS
#endif

#ifdef ALG_DS
    #define MODE arpathtracermode_direction_sampling
#elif defined ALG_LS
    #define MODE arpathtracermode_light_sampling
#else
    #define MODE arpathtracermode_mis
#endif

ARM_MAIN_FUNCTION(Camera)
{
	
    ArObj fullSpectrum =
        CONST_COLOUR_PSSPECTRUM(1.0,
                            PNT2D( 300.0 NANOMETER, 1.0 ),
                            PNT2D( 700.0 NANOMETER, 1.0 ),
                            PSS_END
                            );
	
    id box = 
    #ifdef PLAIN_BOX
        radiosityBox_Plain(art_gv);
    #else
        radiosityBox_SimpleGrid(art_gv);
    #endif


	id light =
		[ planarLamp(art_gv, fullSpectrum, 0.2, 1.0) trafo
			: USCALE(0.4)
			: TRANSLATION(0.0, 0.0, 1.0)
		  ];
			
	id scene_geometry =
		UNION(box,
			  light,
			  UNION_END
			  );
	
	id camera =
	#ifdef SIMPLE_CAMERA_
        [ CAMERA
            imageSize : IVEC2D(128, 128)
                ray   : RAY3D(PNT3D(0.0, 5.0, 0.0), VEC3D(0.0, -1.0, 0.0) )
                zoom  : 1.42
        ];
    #elif defined FISHEYE_CAMERA_
	    [ FISHEYE_CAMERA
            imageSize : IVEC2D(128, 128)
                ray   : RAY3D(PNT3D(0.0, 1.0, 0.0), VEC3D(0.0, -1.0, 0.0) )
                zoom  : 1.0
        ];
    #elif defined UNIFORM_FISHEYE_CAMERA_
		[ UNIFORM_FISHEYE_CAMERA
            imageSize : IVEC2D(128, 128)
                ray   : RAY3D(PNT3D(0.0, 1.0, 0.0), VEC3D(0.0, -1.0, 0.0) )
                zoom  : 1.0
		  ];
	#endif
    id actionsequence =
        ACTION_SEQUENCE(
            CREATE_STANDARD_RAYCASTING_ACCELERATION_STRUCTURE,

            [ LIGHTSOURCE_COLLECTOR
                sampler2D  : STANDARD_SAMPLER_2D
                resolution : 5
                type       : arlightsourcetype_area
            ],

            [ STOCHASTIC_PIXEL_SAMPLER
                sampleProvider:
                    [ SIMPLE_PATHTRACER
                        rayCaster        : STANDARD_RAYCASTER
                        maximalRecursion : PATH_LENGTH
                        mode             : MODE
                    ]
                sampleSplattingKernel : TENT_KERNEL
                samplesPerPixel       : SAMPLES
                randomValueGeneration : PSEUDORANDOM_SEQUENCE
            ],

            [ IMAGECONVERSION_RAW_TO_ARTCSP
                removeSource: NO
            ],

            STANDARD_GLOBAL_TONEMAPPING_OPERATOR,
            
            STANDARD_LUMINANCE_CLIPPING,

            [ IMAGECONVERSION_ARTCSP_TO_TIFF
                removeSource   : YES
                bitsPerChannel : 8
            ],

            ACTION_SEQUENCE_END
        );

    return
        [ SCENE
            sceneGeometry       : scene_geometry
            camera              : camera
            actionSequence      : actionsequence
        ];
}
